# Generated by Django 5.0.8 on 2024-09-05 15:09

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("search", "0001_initial"),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
                DROP MATERIALIZED VIEW IF EXISTS search_commonindex;
                CREATE MATERIALIZED VIEW search_commonindex AS
                (
                    SELECT
                        gen_random_uuid() AS id,
                        'TOPIC' AS kind,
                        forum_conversation_topic.subject AS title,
                        string_agg(forum_conversation_post._content_rendered, ' ') AS content,
                        (
                            setweight(to_tsvector('french', forum_conversation_topic.subject), 'A')
                            ||
                            setweight(
                                to_tsvector(
                                    'french',
                                    string_agg(COALESCE(forum_conversation_post._content_rendered, ''), ' ')
                                ),
                                'C'
                            )
                        ) AS content_ts,
                        forum_forum.id AS forum_id,
                        forum_forum.slug AS forum_slug,
                        NULL AS forum_updated,
                        forum_conversation_topic.id AS topic_id,
                        forum_conversation_topic.slug AS topic_slug
                    FROM forum_conversation_topic
                    INNER JOIN forum_forum
                        ON forum_forum.id = forum_conversation_topic.forum_id
                    LEFT JOIN forum_conversation_post
                        ON forum_conversation_post.topic_id = forum_conversation_topic.id
                    WHERE forum_conversation_topic.approved
                        AND forum_conversation_post.approved
                    GROUP BY forum_forum.id, forum_forum.slug, forum_conversation_topic.id
                )

                UNION ALL

                SELECT
                    gen_random_uuid(),  -- id column, for Django ORM
                    'FORUM',
                    forum_forum.name,
                    concat_ws(' ', forum_forum.short_description, forum_forum.description),
                    (
                        setweight(
                            to_tsvector('french', forum_forum.name),
                            'A'
                        )
                        ||
                        setweight(
                            to_tsvector('french', concat_ws(' ', forum_forum.short_description, forum_forum.description)),
                            'B'
                        )
                    ),
                    forum_forum.id,
                    forum_forum.slug,
                    forum_forum.updated,
                    NULL,  -- topic_id
                    ''  -- topic_slug
                FROM forum_forum
                WHERE forum_forum.description != ''
                    AND forum_forum.description IS NOT NULL;
            """,
            reverse_sql="""
                DROP MATERIALIZED VIEW IF EXISTS search_commonindex;
                CREATE MATERIALIZED VIEW search_commonindex AS
                (
                    SELECT
                        gen_random_uuid() AS id,
                        'TOPIC' AS kind,
                        forum_conversation_topic.subject AS title,
                        string_agg(forum_conversation_post._content_rendered, ' ') AS content,
                        (
                            setweight(to_tsvector('french', forum_conversation_topic.subject), 'A')
                            ||
                            setweight(
                                to_tsvector(
                                    'french',
                                    string_agg(COALESCE(forum_conversation_post._content_rendered, ''), ' ')
                                ),
                                'C'
                            )
                        ) AS content_ts,
                        forum_forum.id AS forum_id,
                        forum_forum.slug AS forum_slug,
                        NULL AS forum_updated,
                        forum_conversation_topic.id AS topic_id,
                        forum_conversation_topic.slug AS topic_slug
                    FROM forum_conversation_topic
                    INNER JOIN forum_forum
                        ON forum_forum.id = forum_conversation_topic.forum_id
                    LEFT JOIN forum_conversation_post
                        ON forum_conversation_post.topic_id = forum_conversation_topic.id
                    WHERE forum_conversation_topic.approved
                        AND forum_conversation_post.approved
                        AND forum_forum.kind != 'PRIVATE_FORUM'
                    GROUP BY forum_forum.id, forum_forum.slug, forum_conversation_topic.id
                )

                UNION ALL

                SELECT
                    gen_random_uuid(),  -- id column, for Django ORM
                    'FORUM',
                    forum_forum.name,
                    concat_ws(' ', forum_forum.short_description, forum_forum.description),
                    (
                        setweight(
                            to_tsvector('french', forum_forum.name),
                            'A'
                        )
                        ||
                        setweight(
                            to_tsvector('french', concat_ws(' ', forum_forum.short_description, forum_forum.description)),
                            'B'
                        )
                    ),
                    forum_forum.id,
                    forum_forum.slug,
                    forum_forum.updated,
                    NULL,  -- topic_id
                    ''  -- topic_slug
                FROM forum_forum
                WHERE forum_forum.kind = 'PUBLIC_FORUM'
                    AND forum_forum.description != ''
                    AND forum_forum.description IS NOT NULL;
            """,
        ),
    ]
