# Generated by Django 4.2.9 on 2024-01-18 10:45

import django.contrib.postgres.search
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("forum_conversation", "0001_initial"),
        ("forum", "0012_forum_short_description_alter_forum_kind"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommonIndex",
            fields=[
                ("id", models.UUIDField(primary_key=True, editable=False, verbose_name="ID")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("TOPIC", "topic"),
                            ("FORUM", "forum"),
                        ],
                        editable=False,
                        max_length=32,
                    ),
                ),
                ("title", models.CharField(editable=False, max_length=255)),
                ("content", models.TextField(blank=True, editable=False)),
                ("content_ts", django.contrib.postgres.search.SearchVectorField(blank=True, editable=False)),
                ("forum_id", models.PositiveBigIntegerField(editable=False)),
                ("forum_slug", models.CharField(editable=False, max_length=255)),
                ("forum_updated", models.DateTimeField(editable=False)),
                ("topic_id", models.PositiveBigIntegerField(editable=False)),
                ("topic_slug", models.CharField(editable=False, max_length=255)),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.RunSQL(
            """
            CREATE MATERIALIZED VIEW search_commonindex AS
            (
                SELECT
                    -- The ORM requires all models (even managed=False) to have a primary key.
                    gen_random_uuid() AS id,
                    'TOPIC' AS kind,
                    forum_conversation_topic.subject AS title,
                    -- Use the rendered content, itâ€™s safe for HTML output (sanitized by Markdown2).
                    string_agg(forum_conversation_post._content_rendered, ' ') AS content,
                    (
                        setweight(to_tsvector('french', forum_conversation_topic.subject), 'A')
                        ||
                        setweight(
                            to_tsvector(
                                'french',
                                string_agg(COALESCE(forum_conversation_post._content_rendered, ''), ' ')
                            ),
                            'C'
                        )
                    ) AS content_ts,
                    forum_forum.id AS forum_id,
                    forum_forum.slug AS forum_slug,
                    NULL AS forum_updated,
                    forum_conversation_topic.id AS topic_id,
                    forum_conversation_topic.slug AS topic_slug
                FROM forum_conversation_topic
                INNER JOIN forum_forum
                    ON forum_forum.id = forum_conversation_topic.forum_id
                LEFT JOIN forum_conversation_post
                    ON forum_conversation_post.topic_id = forum_conversation_topic.id
                WHERE forum_conversation_topic.approved
                    AND forum_conversation_post.approved
                    AND forum_forum.kind != 'PRIVATE_FORUM'
                GROUP BY forum_forum.id, forum_forum.slug, forum_conversation_topic.id
            )

            UNION ALL

            SELECT
                gen_random_uuid(),  -- id column, for Django ORM
                'FORUM',
                forum_forum.name,
                concat_ws(' ', forum_forum.short_description, forum_forum.description),
                (
                    setweight(
                        to_tsvector('french', forum_forum.name),
                        'A'
                    )
                    ||
                    setweight(
                        to_tsvector('french', concat_ws(' ', forum_forum.short_description, forum_forum.description)),
                        'B'
                    )
                ),
                forum_forum.id,
                forum_forum.slug,
                forum_forum.updated,
                NULL,  -- topic_id
                ''  -- topic_slug
            FROM forum_forum
            WHERE forum_forum.kind = 'PUBLIC_FORUM'
                AND forum_forum.description != ''
                AND forum_forum.description IS NOT NULL
            """,
            "DROP MATERIALIZED VIEW search_commonindex",
        ),
    ]
